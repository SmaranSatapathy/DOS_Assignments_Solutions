Assignmnet-2
Q1) Sort the numbers in ascending:
cat> a.txt
45
ctrl+c
cat >b.txt
100
ctrl+c
cat> c.txt
10
ctrl+c

cat>prog
#!/bin/bash
cat a.txt b.txt c.txt > result
sort -n result
ctrl+d

chmod +x prog
./prog

Q2) WRITE THE SYSTEM DETAILS INCLUDING THE USERNAME, SYSTEM USED, TYPE OF SHELL, PWD AND LS.
cat>systeminfo
#!/bin/bash
logname
uname -s
pwd
ls
echo "Shell used is: $SHELL"
ctrl+d

chmod +x systeminfo
./systeminfo

Q3) Write the date and cal function scripting.
cat>dtcal
#!/bin/bash
date "+%Y-%m-%d"
cal
ctrl+d

chmod +x dtcal
./dtcal

Q4) Write script shell to count words,lines and characters in file dtcal.
cat>nvwc
#!/bin/bash

filename="dtcal"
line_count=$(wc -l<"$filename")
word_count=$(wc -w<"$filename")
char_count=$(wc -c<"$filename")
echo "Lines are: $line_count"
echo "Words are: $word_count"
echo "CHaracters are: $char_count"
ctrl+d

chmod +x nvwc
./nvwc

Q5) Write script shell to count words,lines and characters in file dtcal by passing it as an argument.
cat>nvwc2
#!/bin/bash

filename="$1"
line_count=$(wc -l<"$filename")
word_count=$(wc -w<"$filename")
char_count=$(wc -c<"$filename")
echo "Lines are: $line_count"
echo "Words are: $word_count"
echo "CHaracters are: $char_count"
ctrl+d

chmod +x nvwc2 dtcal
./nvwc2

Q6) Write a script file such that it displays total number of arguments, 1st & 2nd argument, and all arguments:
cat>darg
#!/bin/bash

echo "Total Number of arguments are: $#"
echo "1st argument: $1 and 2nd argument is: $2"
echo "All arguments are: $@"
ctrl+d

chmod +x darg
./darg 3 4 5 100 

Q7) Write a shell script named as ndisp that will take three command line arguments specifying the value of n, m and a filename and display the first n number of lines and last m number of lines of the file given as argument.
cat>ndisp
#!/bin/bash

n="$1"
m="$2"
filename="$3"

head -n $n "$filename"
tail -n $m "$filename"
ctrl+d

chmod +x ndisp
./ndisp 3 2 enter_a_file_name


ASSIGNMENT-3
Q1) Write a shell script iaop to perform integer arithmetic on two numbers, where the value of the two numbers will be given during runtime.

cat>iaop
#!/bin/bash

sum=$(( $1 + $2 ))
d=$(( $1 - $2 ))
m=$(( $1 * $2 ))
divi=$(( $1 / $2 ))
echo "Add is: $sum"
echo "Diff is: $d"
echo "Product is: $m"
echo "Division is: $divi"

chmod +x iaop
./iaop 8 4

Q2) Write a shell script faop to perform floating point arithmetic on two numbers, where the
value of the two numbers will be given during runtime.
cat>faop
#!/bin/bash

sum=$(echo "$1 + $2" | bc)
d=$(echo "$1 - $2" | bc)
m=$(echo "$1 * $2" | bc )
divi=$(echo "scale=3; $1 / $2 " | bc)
echo "Add is: $sum"
echo "Diff is: $d"
echo "Product is: $m"
echo "Division is: $divi"
ctrl+d
chmod +x faop
./faop 5.0 2.0

Q3)Rameshâ€™s basic salary is input through the keyboard. His dearness allowance is 40% of basic salary, and house rent allowance is 20% of basic salary. Write a program to calculate his gross salary.
cat>Ramesh
#!/bin/bash

echo  "Enter salary: "
read salary
house_rent=$(echo "scale=4; 0.2 * $salary " | bc)
dearness_allowance=$(echo "scale=3; 0.4 * $salary " | bc)
echo "Salary is: $salary"
gross_salary=$(echo "scale=3; $salary - $house_rent - $dearness_allowance" | bc)
echo "Gross salary is:  $gross_salary"
ctrl+d 
chmod +x Ramesh
./Ramesh


Q4) Enter 5 digit number during input and find its sum.
cat>sums
#!/bin/bash

echo "Enter a 5 digit number: "
read n

num=$n

sum=0
digits=0

while [ $n -ne 0 ]
do
rem=$(( n % 10 ))
digits=$(( digits + 1 ))
n=$(( n / 10 ))
done

echo "Digits are: $digits"

if [[ $digits -eq 5 ]]
then
while [[ $num -ne 0 ]]
do
rem=$(( num % 10 ))
sum=$(( rem + sum ))
num=$(( num /10 ))
done
fi

echo "Sum is: $sum"
ctrl+d
chmod +x sums
./sums

Q5) Calculate the loss/profit incurred.
#!/bin/bash

echo "Enter Cost Price:"
read cost_price
echo "Enter Selling Price:"
read selling_price

if [ $selling_price -gt $cost_price ]; then
    profit=$((selling_price - cost_price))
    echo "Profit of: $profit"
elif [ $cost_price -gt $selling_price ]; then
    loss=$((cost_price - selling_price))
    echo "Loss of: $loss"
else
    echo "No profit, no loss."
fi

Q6)Leap year check:
#!/bin/bash

year=$(date +%Y)  # Default to current year
if [ $# -eq 1 ]; then
    year=$1
fi

if [ $((year % 4)) -eq 0 -a $((year % 100)) -ne 0 -o $((year % 400)) -eq 0 ]; then
    echo "$year is a Leap Year"
else
    echo "$year is not a Leap Year"
fi


Q7) Semester mark check:
#!/bin/bash

echo "Enter Internal Marks:"
read marks
echo "Enter Percentage Attendance:"
read attendance

if [ $marks -ge 20 ] && [ $attendance -ge 75 ]; then
    echo "Allowed for Semester"
else
    echo "Not Allowed"
fi


Q8) Smallest of three numbers: 
#!/bin/bash

if [ $# -ne 3 ]; then
    echo "Please provide three numbers as arguments."
    exit 1
fi

if [ $1 -le $2 ] && [ $1 -le $3 ]; then
    echo "Smallest number is: $1"
elif [ $2 -le $1 ] && [ $2 -le $3 ]; then
    echo "Smallest number is: $2"
else
    echo "Smallest number is: $3"
fi



Q9) CHaracter classification: 
#!/bin/bash

echo "Enter a character:"
read char

if [ ${#char} -gt 1 ]; then
    echo "You have entered more than one character."
elif [[ "$char" =~ [a-z] ]]; then
    echo "You entered a lower case alphabet."
elif [[ "$char" =~ [A-Z] ]]; then
    echo "You entered an upper case alphabet."
elif [[ "$char" =~ [0-9] ]]; then
    echo "You have entered a digit."
else
    echo "You have entered a special symbol."
fi


Q10) DOS Class Timetable: 
#!/bin/bash

echo "Enter a day:"
read day

case $day in
    "Monday"|"Wednesday"|"Friday")
        echo "DOS Class: 10 AM, Room 101"
        ;;
    "Tuesday"|"Thursday")
        echo "DOS Class: 2 PM, Room 202"
        ;;
    "Sunday")
        echo "Holiday"
        ;;
    *)
        echo "No class on $day"
        ;;
esac

Q11) File content check
#!/bin/bash

if [ $# -ne 2 ]; then
    echo "Please provide two file names as arguments."
    exit 1
fi

if cmp -s "$1" "$2"; then
    echo "Files $1 and $2 have same content."
    rm "$2"
    echo "So $2 is deleted."
else
    echo "Files $1 and $2 have different content."
fi


Q12) CALCULATOR
#!/bin/bash

if [ $# -ne 3 ]; then
    echo "Invalid input"
    echo "Enter input in the following format: op1 operator op2"
    exit 1
fi

op1=$1
operator=$2
op2=$3

case $operator in
    +) result=$((op1 + op2)) ;;
    -) result=$((op1 - op2)) ;;
    x) result=$((op1 * op2)) ;;
    /) result=$((op1 / op2)) ;;
    %) result=$((op1 % op2)) ;;
    ^) result=$(echo "$op1 ^ $op2" | bc) ;;
    *) echo "Invalid operator"; exit 1 ;;
esac

echo "$op1 $operator $op2 = $result"




ASSIGNMENT-4
1.a) #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) { 
        // Child Process
        printf("Child: PID = %d, Parent PID = %d\n", getpid(), getppid());
        while (1) {
            // Infinite loop to keep the child alive
        }
    } else { 
        // Parent Process
        printf("Parent: PID = %d, Child PID = %d\n", getpid(), pid);
        while (1) {
            // Infinite loop to keep the parent alive
        }
    }

    return 0;
}

b) ps -aux | grep program
   kill -9 <child_pid>
   ps
c) kill -9 <parent_pid>
   ps
d)#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) { 
        // Child Process
        printf("Child: PID = %d, Parent PID = %d\n", getpid(), getppid());
        sleep(5); // Simulate some work
        printf("Child process completed.\n");
        exit(0);
    } else { 
        // Parent Process
        printf("Parent: PID = %d, Child PID = %d\n", getpid(), pid);
        wait(NULL); // Wait for child to finish
        printf("Parent process detected child completion.\n");
    }

    return 0;
}

e)kill -9 <child_pid>

Q3)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

void copy_file(const char* source, const char* destination) {
    FILE *src = fopen(source, "r");
    FILE *dest = fopen(destination, "w");

    if (!src || !dest) {
        perror("Error opening files");
        exit(EXIT_FAILURE);
    }

    char buffer[1024];
    while (fgets(buffer, sizeof(buffer), src)) {
        fputs(buffer, dest);
    }

    fclose(src);
    fclose(dest);
}

void display_file(const char* filename) {
    FILE *file = fopen(filename, "r");

    if (!file) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    char buffer[1024];
    while (fgets(buffer, sizeof(buffer), file)) {
        printf("%s", buffer);
    }

    fclose(file);
}

void display_sorted_reverse(const char* filename) {
    FILE *file = fopen(filename, "r");

    if (!file) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    char lines[100][1024];
    int count = 0;

    // Read all lines into an array
    while (fgets(lines[count], sizeof(lines[count]), file)) {
        count++;
    }

    fclose(file);

    // Sort the lines (basic lexicographical order)
    for (int i = 0; i < count - 1; i++) {
        for (int j = i + 1; j < count; j++) {
            if (strcmp(lines[i], lines[j]) > 0) {
                char temp[1024];
                strcpy(temp, lines[i]);
                strcpy(lines[i], lines[j]);
                strcpy(lines[j], temp);
            }
        }
    }

    // Display the lines in reverse order
    for (int i = count - 1; i >= 0; i--) {
        printf("%s", lines[i]);
    }
}

int main() {
    const char* file1 = "file1.txt";
    const char* file2 = "file2.txt";

    pid_t pid1, pid2, pid3;

    // First child: Copy content of file1 to file2
    if ((pid1 = fork()) == 0) {
        printf("Child 1: PID = %d, Parent PID = %d\n", getpid(), getppid());
        copy_file(file1, file2);
        printf("Child 1: File copied successfully.\n");
        exit(0);
    }

    sleep(1); // Delay for parent process

    // Second child: Display content of file2
    if ((pid2 = fork()) == 0) {
        printf("Child 2: PID = %d, Parent PID = %d\n", getpid(), getppid());
        printf("Child 2: Content of file2:\n");
        display_file(file2);
        exit(0);
    }

    sleep(1); // Delay for parent process

    // Third child: Display sorted content of file2 in reverse order
    if ((pid3 = fork()) == 0) {
        printf("Child 3: PID = %d, Parent PID = %d\n", getpid(), getppid());
        printf("Child 3: Sorted content of file2 in reverse order:\n");
        display_sorted_reverse(file2);
        exit(0);
    }

    sleep(1); // Delay for parent process

    // Parent waits for all child processes
    wait(NULL); // Wait for first child
    wait(NULL); // Wait for second child
    wait(NULL); // Wait for third child

    printf("Parent: PID = %d. All child processes have completed.\n", getpid());

    return 0;
}

to run: 
echo -e "apple\norange\nbanana\ngrape" > file1.txt
gcc q3.c
./a.out

Q4) Fibonacci Series print via C.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdbool.h>

#define MAX_FIB 100

// Function to check if a number is prime
bool is_prime(int num) {
    if (num <= 1) return false;
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) return false;
    }
    return true;
}

// Function to generate the Fibonacci series
void generate_fibonacci(int *fib_array, int length) {
    if (length >= 1) fib_array[0] = 0;
    if (length >= 2) fib_array[1] = 1;

    for (int i = 2; i < length; i++) {
        fib_array[i] = fib_array[i - 1] + fib_array[i - 2];
    }
}

int main() {
    int fib_length;
    printf("Enter the length of the Fibonacci series: ");
    scanf("%d", &fib_length);

    if (fib_length <= 0 || fib_length > MAX_FIB) {
        printf("Invalid length. Please enter a number between 1 and %d.\n", MAX_FIB);
        return 1;
    }

    int fib_array[fib_length];
    pid_t pid = fork();

    if (pid == 0) {  // Child process
        printf("Child: Generating Fibonacci series...\n");
        generate_fibonacci(fib_array, fib_length);

        // Writing Fibonacci array to a pipe for parent process
        for (int i = 0; i < fib_length; i++) {
            write(STDOUT_FILENO, &fib_array[i], sizeof(int));
        }

        printf("Child: Fibonacci series generated.\n");
        exit(0);
    } else if (pid > 0) {  // Parent process
        wait(NULL);  // Wait for child to complete

        // Reading Fibonacci array from the child process
        printf("Parent: Fibonacci series received.\nFibonacci series: ");
        for (int i = 0; i < fib_length; i++) {
            read(STDIN_FILENO, &fib_array[i], sizeof(int));
            printf("%d ", fib_array[i]);
        }
        printf("\n");

        // Finding and displaying prime Fibonacci numbers
        printf("Parent: Prime Fibonacci numbers in the series:\n");
        for (int i = 0; i < fib_length; i++) {
            if (is_prime(fib_array[i])) {
                printf("Fibonacci number %d at position %d is prime.\n", fib_array[i], i + 1);
            }
        }
    } else {  // Fork failed
        perror("Fork failed");
        return 1;
    }

    return 0;
}
to run: gcc q4.c
	./a.out 



Assignment-5
Q1) PRODUCER CONSUMER PROBLEM: -> q1.c
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 10
#define NUM_ITERATIONS 20

int buffer[BUFFER_SIZE];
int count = 0; // Tracks the number of items in the buffer
int in = 0;    // Points to the next free position in the buffer
int out = 0;   // Points to the next item to consume

pthread_mutex_t mutex;
sem_t empty;
sem_t full;

// Producer function
void* producer(void* arg) {
    for (int i = 1; i <= NUM_ITERATIONS; i++) {
        sem_wait(&empty); // Wait for empty slots
        pthread_mutex_lock(&mutex); // Lock the buffer

        buffer[in] = i; // Produce the item
        printf("Producer: Produced %d\n", i);
        in = (in + 1) % BUFFER_SIZE; // Update the buffer index
        count++;

        pthread_mutex_unlock(&mutex); // Unlock the buffer
        sem_post(&full); // Signal that a new item is available

        usleep(rand() % 100000); // Simulate production time
    }
    pthread_exit(NULL);
}

// Consumer function
void* consumer(void* arg) {
    for (int i = 1; i <= NUM_ITERATIONS; i++) {
        sem_wait(&full); // Wait for items to consume
        pthread_mutex_lock(&mutex); // Lock the buffer

        int item = buffer[out]; // Consume the item
        printf("Consumer: Consumed %d\n", item);
        out = (out + 1) % BUFFER_SIZE; // Update the buffer index
        count--;

        pthread_mutex_unlock(&mutex); // Unlock the buffer
        sem_post(&empty); // Signal that a slot is empty

        usleep(rand() % 100000); // Simulate consumption time
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t prod_thread, cons_thread;

    // Initialize the mutex and semaphores
    pthread_mutex_init(&mutex, NULL);
    sem_init(&empty, 0, BUFFER_SIZE); // Buffer starts empty
    sem_init(&full, 0, 0);            // No items to consume initially

    // Create producer and consumer threads
    pthread_create(&prod_thread, NULL, producer, NULL);
    pthread_create(&cons_thread, NULL, consumer, NULL);

    // Wait for the threads to complete
    pthread_join(prod_thread, NULL);
    pthread_join(cons_thread, NULL);

    // Destroy mutex and semaphores
    pthread_mutex_destroy(&mutex);
    sem_destroy(&empty);
    sem_destroy(&full);

    return 0;
}

to run: gcc q1.c
	./a.out

Q2) ODD EVEN NUMBERS: -> q2.c
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define MAX_NUMBER 20

sem_t sem_odd, sem_even;

// Thread A: Prints odd numbers
void* print_odd(void* arg) {
    for (int i = 1; i <= MAX_NUMBER; i += 2) {
        sem_wait(&sem_odd); // Wait for the turn to print odd
        printf("Thread A (Odd): %d\n", i);
        sem_post(&sem_even); // Signal Thread B (Even)
    }
    pthread_exit(NULL);
}

// Thread B: Prints even numbers
void* print_even(void* arg) {
    for (int i = 2; i <= MAX_NUMBER; i += 2) {
        sem_wait(&sem_even); // Wait for the turn to print even
        printf("Thread B (Even): %d\n", i);
        sem_post(&sem_odd); // Signal Thread A (Odd)
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t thread_odd, thread_even;

    // Initialize semaphores
    sem_init(&sem_odd, 0, 1);  // Thread A starts first
    sem_init(&sem_even, 0, 0); // Thread B waits initially

    // Create threads
    pthread_create(&thread_odd, NULL, print_odd, NULL);
    pthread_create(&thread_even, NULL, print_even, NULL);

    // Wait for threads to finish
    pthread_join(thread_odd, NULL);
    pthread_join(thread_even, NULL);

    // Destroy semaphores
    sem_destroy(&sem_odd);
    sem_destroy(&sem_even);

    return 0;
}

to run: gcc q2.c
	./a.out

Q3) ALTERNATE CHARACTERS: ->q3.c
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define MAX_COUNT 20

sem_t sem_A, sem_B;

// Thread A: Prints 'A'
void* print_A(void* arg) {
    for (int i = 0; i < MAX_COUNT; i++) {
        sem_wait(&sem_A); // Wait for the turn to print 'A'
        printf("A");
        fflush(stdout); // Ensure immediate output
        sem_post(&sem_B); // Signal Thread B to print 'B'
    }
    pthread_exit(NULL);
}

// Thread B: Prints 'B'
void* print_B(void* arg) {
    for (int i = 0; i < MAX_COUNT; i++) {
        sem_wait(&sem_B); // Wait for the turn to print 'B'
        printf("B");
        fflush(stdout); // Ensure immediate output
        sem_post(&sem_A); // Signal Thread A to print 'A'
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t thread_A, thread_B;

    // Initialize semaphores
    sem_init(&sem_A, 0, 1);  // Thread A starts first
    sem_init(&sem_B, 0, 0);  // Thread B waits initially

    // Create threads
    pthread_create(&thread_A, NULL, print_A, NULL);
    pthread_create(&thread_B, NULL, print_B, NULL);

    // Wait for threads to finish
    pthread_join(thread_A, NULL);
    pthread_join(thread_B, NULL);

    // Destroy semaphores
    sem_destroy(&sem_A);
    sem_destroy(&sem_B);

    return 0;
}

to run: gcc q3.c
	./a.out

Q4) COUNTDOWN and COUNTUP -> q4.c
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define MAX_COUNT 10

sem_t sem_A, sem_B;

// Thread A: Counts down from 10 to 1
void* count_down(void* arg) {
    for (int i = MAX_COUNT; i >= 1; i--) {
        sem_wait(&sem_A); // Wait for the turn to count down
        printf("Thread A: %d\n", i);
        fflush(stdout); // Ensure immediate output
        sem_post(&sem_B); // Signal Thread B to count up
    }
    pthread_exit(NULL);
}

// Thread B: Counts up from 1 to 10
void* count_up(void* arg) {
    for (int i = 1; i <= MAX_COUNT; i++) {
        sem_wait(&sem_B); // Wait for the turn to count up
        printf("Thread B: %d\n", i);
        fflush(stdout); // Ensure immediate output
        sem_post(&sem_A); // Signal Thread A to count down
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t thread_A, thread_B;

    // Initialize semaphores
    sem_init(&sem_A, 0, 1);  // Thread A starts first
    sem_init(&sem_B, 0, 0);  // Thread B waits initially

    // Create threads
    pthread_create(&thread_A, NULL, count_down, NULL);
    pthread_create(&thread_B, NULL, count_up, NULL);

    // Wait for threads to finish
    pthread_join(thread_A, NULL);
    pthread_join(thread_B, NULL);

    // Destroy semaphores
    sem_destroy(&sem_A);
    sem_destroy(&sem_B);

    return 0;
}

to run: gcc q4.c
	./a.out

Q5) SEQUENCE PRINTING -> q5.c
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define MAX_COUNT 20

sem_t sem_A, sem_B, sem_C;

// Thread A: Prints A1, A4, A7, ...
void* print_A(void* arg) {
    for (int i = 1; i <= MAX_COUNT; i += 3) {
        sem_wait(&sem_A); // Wait for the turn to print A
        printf("A%d\n", i);
        fflush(stdout); // Ensure immediate output
        sem_post(&sem_B); // Signal Thread B to print next
    }
    pthread_exit(NULL);
}

// Thread B: Prints B2, B5, B8, ...
void* print_B(void* arg) {
    for (int i = 2; i <= MAX_COUNT; i += 3) {
        sem_wait(&sem_B); // Wait for the turn to print B
        printf("B%d\n", i);
        fflush(stdout); // Ensure immediate output
        sem_post(&sem_C); // Signal Thread C to print next
    }
    pthread_exit(NULL);
}

// Thread C: Prints C3, C6, C9, ...
void* print_C(void* arg) {
    for (int i = 3; i <= MAX_COUNT; i += 3) {
        sem_wait(&sem_C); // Wait for the turn to print C
        printf("C%d\n", i);
        fflush(stdout); // Ensure immediate output
        sem_post(&sem_A); // Signal Thread A to print next
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t thread_A, thread_B, thread_C;

    // Initialize semaphores
    sem_init(&sem_A, 0, 1);  // Thread A starts first
    sem_init(&sem_B, 0, 0);  // Thread B waits initially
    sem_init(&sem_C, 0, 0);  // Thread C waits initially

    // Create threads
    pthread_create(&thread_A, NULL, print_A, NULL);
    pthread_create(&thread_B, NULL, print_B, NULL);
    pthread_create(&thread_C, NULL, print_C, NULL);

    // Wait for threads to finish
    pthread_join(thread_A, NULL);
    pthread_join(thread_B, NULL);
    pthread_join(thread_C, NULL);

    // Destroy semaphores
    sem_destroy(&sem_A);
    sem_destroy(&sem_B);
    sem_destroy(&sem_C);

    return 0;
}

to run: gcc q5.c
	./a.out
