ASSIGNMENT-4
1.a) #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) { 
        // Child Process
        printf("Child: PID = %d, Parent PID = %d\n", getpid(), getppid());
        while (1) {
            // Infinite loop to keep the child alive
        }
    } else { 
        // Parent Process
        printf("Parent: PID = %d, Child PID = %d\n", getpid(), pid);
        while (1) {
            // Infinite loop to keep the parent alive
        }
    }

    return 0;
}

b) ps -aux | grep program
   kill -9 <child_pid>
   ps
c) kill -9 <parent_pid>
   ps
d)#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) { 
        // Child Process
        printf("Child: PID = %d, Parent PID = %d\n", getpid(), getppid());
        sleep(5); // Simulate some work
        printf("Child process completed.\n");
        exit(0);
    } else { 
        // Parent Process
        printf("Parent: PID = %d, Child PID = %d\n", getpid(), pid);
        wait(NULL); // Wait for child to finish
        printf("Parent process detected child completion.\n");
    }

    return 0;
}

e)kill -9 <child_pid>

Q3)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

void copy_file(const char* source, const char* destination) {
    FILE *src = fopen(source, "r");
    FILE *dest = fopen(destination, "w");

    if (!src || !dest) {
        perror("Error opening files");
        exit(EXIT_FAILURE);
    }

    char buffer[1024];
    while (fgets(buffer, sizeof(buffer), src)) {
        fputs(buffer, dest);
    }

    fclose(src);
    fclose(dest);
}

void display_file(const char* filename) {
    FILE *file = fopen(filename, "r");

    if (!file) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    char buffer[1024];
    while (fgets(buffer, sizeof(buffer), file)) {
        printf("%s", buffer);
    }

    fclose(file);
}

void display_sorted_reverse(const char* filename) {
    FILE *file = fopen(filename, "r");

    if (!file) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    char lines[100][1024];
    int count = 0;

    // Read all lines into an array
    while (fgets(lines[count], sizeof(lines[count]), file)) {
        count++;
    }

    fclose(file);

    // Sort the lines (basic lexicographical order)
    for (int i = 0; i < count - 1; i++) {
        for (int j = i + 1; j < count; j++) {
            if (strcmp(lines[i], lines[j]) > 0) {
                char temp[1024];
                strcpy(temp, lines[i]);
                strcpy(lines[i], lines[j]);
                strcpy(lines[j], temp);
            }
        }
    }

    // Display the lines in reverse order
    for (int i = count - 1; i >= 0; i--) {
        printf("%s", lines[i]);
    }
}

int main() {
    const char* file1 = "file1.txt";
    const char* file2 = "file2.txt";

    pid_t pid1, pid2, pid3;

    // First child: Copy content of file1 to file2
    if ((pid1 = fork()) == 0) {
        printf("Child 1: PID = %d, Parent PID = %d\n", getpid(), getppid());
        copy_file(file1, file2);
        printf("Child 1: File copied successfully.\n");
        exit(0);
    }

    sleep(1); // Delay for parent process

    // Second child: Display content of file2
    if ((pid2 = fork()) == 0) {
        printf("Child 2: PID = %d, Parent PID = %d\n", getpid(), getppid());
        printf("Child 2: Content of file2:\n");
        display_file(file2);
        exit(0);
    }

    sleep(1); // Delay for parent process

    // Third child: Display sorted content of file2 in reverse order
    if ((pid3 = fork()) == 0) {
        printf("Child 3: PID = %d, Parent PID = %d\n", getpid(), getppid());
        printf("Child 3: Sorted content of file2 in reverse order:\n");
        display_sorted_reverse(file2);
        exit(0);
    }

    sleep(1); // Delay for parent process

    // Parent waits for all child processes
    wait(NULL); // Wait for first child
    wait(NULL); // Wait for second child
    wait(NULL); // Wait for third child

    printf("Parent: PID = %d. All child processes have completed.\n", getpid());

    return 0;
}

to run: 
echo -e "apple\norange\nbanana\ngrape" > file1.txt
gcc q3.c
./a.out

Q4) Fibonacci Series print via C.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdbool.h>

#define MAX_FIB 100

// Function to check if a number is prime
bool is_prime(int num) {
    if (num <= 1) return false;
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) return false;
    }
    return true;
}

// Function to generate the Fibonacci series
void generate_fibonacci(int *fib_array, int length) {
    if (length >= 1) fib_array[0] = 0;
    if (length >= 2) fib_array[1] = 1;

    for (int i = 2; i < length; i++) {
        fib_array[i] = fib_array[i - 1] + fib_array[i - 2];
    }
}

int main() {
    int fib_length;
    printf("Enter the length of the Fibonacci series: ");
    scanf("%d", &fib_length);

    if (fib_length <= 0 || fib_length > MAX_FIB) {
        printf("Invalid length. Please enter a number between 1 and %d.\n", MAX_FIB);
        return 1;
    }

    int fib_array[fib_length];
    pid_t pid = fork();

    if (pid == 0) {  // Child process
        printf("Child: Generating Fibonacci series...\n");
        generate_fibonacci(fib_array, fib_length);

        // Writing Fibonacci array to a pipe for parent process
        for (int i = 0; i < fib_length; i++) {
            write(STDOUT_FILENO, &fib_array[i], sizeof(int));
        }

        printf("Child: Fibonacci series generated.\n");
        exit(0);
    } else if (pid > 0) {  // Parent process
        wait(NULL);  // Wait for child to complete

        // Reading Fibonacci array from the child process
        printf("Parent: Fibonacci series received.\nFibonacci series: ");
        for (int i = 0; i < fib_length; i++) {
            read(STDIN_FILENO, &fib_array[i], sizeof(int));
            printf("%d ", fib_array[i]);
        }
        printf("\n");

        // Finding and displaying prime Fibonacci numbers
        printf("Parent: Prime Fibonacci numbers in the series:\n");
        for (int i = 0; i < fib_length; i++) {
            if (is_prime(fib_array[i])) {
                printf("Fibonacci number %d at position %d is prime.\n", fib_array[i], i + 1);
            }
        }
    } else {  // Fork failed
        perror("Fork failed");
        return 1;
    }

    return 0;
}
to run: gcc q4.c
	./a.out 


